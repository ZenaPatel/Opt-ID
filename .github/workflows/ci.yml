# Copyright 2017 Diamond Light Source
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.


name: CI - Build Container Images and Test

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - README.md
      - README.template
      - .github/workflows/readme.yml
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - README.md
      - README.template
      - .github/workflows/readme.yml

  workflow_dispatch:

jobs:
  build_env:
    name: Build containers and test
    runs-on: ubuntu-20.04

    steps:
      # Configure environment variable depending on which branch we are running on
      - name: Set env to master
        if: endsWith(github.ref, '/master')
        run: echo "REPO_TAG=latest" >> $GITHUB_ENV
      - name: Set env to branch
        if: (!endsWith(github.ref, '/master'))
        run: echo "REPO_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Set image names
        run: |
          echo "QUAY_IMAGE_NAME=quay.io/${{ secrets.QUAY_ORG }}/${{ secrets.QUAY_REPO }}:$REPO_TAG" >> $GITHUB_ENV
          echo "SYLABS_IMAGE_NAME=${{ secrets.SYLABS_ORG }}/${{ secrets.SYLABS_REPO }}/${{ secrets.SYLABS_REPO }}:$REPO_TAG" >> $GITHUB_ENV

      # Checks-out repository under $(pwd)
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      # Build Docker image, push image to Quay.io on success

      - name: Docker container build
        run: |
          docker pull $QUAY_IMAGE_NAME || true
          docker build --pull --cache-from $QUAY_IMAGE_NAME --tag $QUAY_IMAGE_NAME -f Dockerfile .

      - name: Docker container tests
        run: |
          docker run --rm -v $(pwd):/tmp/repo/ -w /tmp/repo/ $QUAY_IMAGE_NAME \
            python2 -m pytest --cov=/usr/local/Opt-ID/IDSort/src /usr/local/Opt-ID/IDSort/test/ --cov-report xml:coverage.xml --cov-report term-missing

      - name: Docker container push to Quay.io
        run: |
          echo "${{ secrets.QUAY_TOKEN }}" | docker login -u "${{ secrets.QUAY_USERNAME }}" --password-stdin quay.io
          docker push $QUAY_IMAGE_NAME

      - name: Codecov push coverage results
        run: |
          bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }} -f coverage.xml
          
      # Convert Docker image to Singularity image and push to Sylabs.io on success
        
      - name: Singularity container environment
        run: |
          docker pull quay.io/singularity/singularity:v3.9.4-slim
          docker run --name singularity_env -itd --entrypoint /bin/bash -v $(pwd):/tmp/repo/ -w /tmp/repo/ quay.io/singularity/singularity:v3.9.4-slim
          
      - name: Singularity container build
        run: |
          docker exec singularity_env singularity build ${{ secrets.SYLABS_REPO }}.sif docker://$QUAY_IMAGE_NAME
          
      #- name: Singularity container tests
      #  run: |
      #    docker exec singularity_env singularity run ${{ secrets.SYLABS_REPO }}.sif python2 -m pytest  /usr/local/Opt-ID/IDSort/test/
          
      - name: Singularity container push to Sylabs.io
        run: |
          echo "${{ secrets.SYLABS_TOKEN }}" > sylabs_token
          docker exec singularity_env singularity remote login --tokenfile sylabs_token
          docker exec singularity_env singularity push --allow-unsigned ${{ secrets.SYLABS_REPO }}.sif library://$SYLABS_IMAGE_NAME
          
      - name: Singularity container halt
        run: |
          docker stop singularity_env
          docker rm singularity_env
          
